// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Note {
  id        Int      @id @default(autoincrement())
  authorId  String?
  published Boolean  @default(false)
  isPrivate Boolean  @default(false)
  thumbnail String?
  title     String
  text      String
  author    String   @default("Admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// enum Role {
//   USER
//   ADMIN
//   SUPERADMIN
// }

// model User {
//   id             String    @id @default(cuid())
//   username       String?   @unique
//   name           String?
//   email          String    @unique
//   isVerified     Boolean   @default(false)
//   emailVerified  DateTime?
//   gender         String?
//   bio            String?
//   accounts       Account[]
//   sessions       Session[]
//   notes          Note[]
//   blogs          Blog[]
//   role           Role      @default(USER)
//   avatarUpdateAt DateTime?
//   image          String?
//   createdAt      DateTime  @default(now())
//   updatedAt      DateTime  @updatedAt
// }

// model Note {
//   id        Int      @id @default(autoincrement())
//   authorId  String?
//   published Boolean  @default(false)
//   isPrivate Boolean  @default(false)
//   thumbnail String?
//   title     String
//   text      String
//   author    User?    @relation(fields: [authorId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Blog {
//   id        Int      @id @default(autoincrement())
//   authorId  String?
//   published Boolean  @default(false)
//   isPrivate Boolean  @default(false)
//   thumbnail String?
//   title     String
//   text      String
//   author    User?    @relation(fields: [authorId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([provider, providerAccountId])
// }

// model Session {
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model VerificationToken {
//   identifier String
//   token      String
//   expires    DateTime

//   @@id([identifier, token])
// }
